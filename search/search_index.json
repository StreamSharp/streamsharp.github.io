{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to StreamSharp","text":""},{"location":"#what-is-streamsharp","title":"What is StreamSharp?","text":"<p>StreamSharp is a new C# wrapper being designed for developing Stream Deck plugins. It has a focus on modularity and flexibility. You can choose as lean or as full a system as you like, and it can easily be expanded with \"helper plugins\" that expand the functionality beyond the base. As the wrapper develops, functionality will be documented on this site. Helper plugins that we personally make will also be documented on this site.</p>"},{"location":"#difficulty-of-transferring","title":"Difficulty of transferring","text":"<p>If you are currently using BarRaider's StreamDeck-Tools, then StreamSharp should be a relatively seamless transfer. StreamSharp uses StreamDeck-Tools as a baseline for the wrapper. However, there may be a small learning curve in getting familiar with the modularity of StreamSharp. If you use any other wrapper, you will have to double check the functionality.</p>"},{"location":"#beginning-with-streamsharp","title":"Beginning with StreamSharp","text":"<p>Due to the nature of software development, difficulty in using StreamSharp will depend on a multitude of factors. We offer a getting started guide to try and help ease the process.</p>"},{"location":"Getting%20Started/","title":"A quick start to StreamSharp","text":"<p>Guide will be available once the wrapper is built and ready for use.</p>"},{"location":"StreamSharp%20Full%20Documentation%20%28Official%29/","title":"Full Documentation","text":"<p>This section will contain all documentation regarding StreamSharp and its feature set. However, only the official helper plugins will be documented here alongside the base documentation. Third party helper plugin providers are expected to provide their own documentation. We also plan for our documentation to be available (at least partially) in IDEs via the pop-ups that appear in software such as Visual Studio to guide you on how to use our tool.</p>"},{"location":"StreamSharp%20Full%20Documentation%20%28Official%29/#important-notice","title":"Important notice","text":"<p>Please note that StreamSharp is originally based on BarRaider's StreamDeck-Tools</p>"},{"location":"StreamSharp%20Full%20Documentation%20%28Official%29/StreamSharp.Base/","title":"StreamSharp Base","text":""},{"location":"StreamSharp%20Full%20Documentation%20%28Official%29/StreamSharp.Base/#what-is-streamsharp-base","title":"What is StreamSharp Base?","text":"<p>StreamSharp base is the functionality that handles communication to and from the StreamDeck. It passes the JSON stuff as simple objects, and is dependent on you providing you interpreting the data. It also does not come with a graphics engine, and sends the image data as a simple <code>string base64encoded</code>.</p>"},{"location":"StreamSharp%20Full%20Documentation%20%28Official%29/StreamSharp.Base/Surface%20Types/","title":"StreamSharp Surface Types","text":"<p>The StreamSharp surface types are the means in which to connect to specific types of input on a Stream Deck device.</p>"},{"location":"StreamSharp%20Full%20Documentation%20%28Official%29/StreamSharp.Base/Surface%20Types/#surface-type-categories","title":"Surface type categories","text":"<p>Please note that we only list the two categories for types on this page. For more information on individual surface types, please see the navigation. If you are new to Stream Deck coding, it is recommended you check the Shared Functionality first before looking at individual types.</p>"},{"location":"StreamSharp%20Full%20Documentation%20%28Official%29/StreamSharp.Base/Surface%20Types/#individual-types","title":"Individual Types","text":"<p>Individual types are focused on a single paradigm (such as dials, keys, etc).</p> Note <p>Individual types are the recommended option by the lib founder (for the most part), as they allow you to be more granular in your functionality, and allow you to have the mindset of adjusting your functionality based on the input surface you're working with.</p> Tip <p>If you are wanting to bring similar functionality to multiple input surfaces, consider using naming suffixes.</p> <p>Let's take an example:</p> <ul> <li>You're building an action of <code>ControlInput</code> that will use both keys and dials<ol> <li>Use <code>ControlInputKey</code> for the keypad</li> <li>Use <code>ControlInputEncoder</code> for the dials</li> </ol> </li> </ul> <p>Please note that this is a guideline, and you are free to approach this how you feel is best.</p> Does this come in StreamSharp.Base? <p>StreamSharp.Base includes all individual types by default. You will not need to download any helper modules to access these.</p>"},{"location":"StreamSharp%20Full%20Documentation%20%28Official%29/StreamSharp.Base/Surface%20Types/#combined-types","title":"Combined Types","text":"<p>Combined types take more than one paradigm and include them together.</p> Pitfalls of using combined types <p>While combined types seem useful, dependent on the way the SDK functionality is combined, this may end up merging functionality into a single method between input types. It is a trade off between centralising your code and allowing for more granular control.</p> <p>These are mostly available for compatibility purposes</p> Does this come in StreamSharp.Base? <p>Unless otherwise stated in the individual surface type page, Combined Types are in separate helper modules and will need to be downloaded separately.</p>"},{"location":"StreamSharp%20Full%20Documentation%20%28Official%29/StreamSharp.Base/Surface%20Types/shared-functions/","title":"Shared Functionality","text":"<p>StreamSharp's surface types will have shared functions. In this page, I will detail the shared functions and what they're for. Allowing the focus on the individual/combined types to be on the code used for those.</p>"},{"location":"StreamSharp%20Full%20Documentation%20%28Official%29/StreamSharp.Base/Surface%20Types/shared-functions/#example-code","title":"Example code","text":"Example <pre><code>[PluginActionId(\"com.developer.csharptemplate.pluginactionkeyanddial\")]\npublic class PluginActionKeyAndDial : KeyAndEncoderBase\n{\n    private class PluginSettings\n    {\n        public static PluginSettings CreateDefaultSettings()\n        {\n            PluginSettings instance = new PluginSettings();\n            instance.OutputFileName = String.Empty;\n            instance.InputString = String.Empty;\n            return instance;\n        }\n\n        [FilenameProperty]\n        [JsonProperty(PropertyName = \"outputFileName\")]\n        public string OutputFileName { get; set; }\n\n        [JsonProperty(PropertyName = \"inputString\")]\n        public string InputString { get; set; }\n    }\n\n    #region Private Members\n\n    private PluginSettings settings;\n\n    #endregion\n\n    // Individual type functionality will go here\n\n    public override void Dispose()\n    {\n        Logger.Instance.LogMessage(TracingLevel.INFO, \"Destructor called\");\n    }\n\n    public override void OnTick() { }\n\n    public override void ReceivedSettings(ReceivedSettingsPayload payload)\n    {\n        Tools.AutoPopulateSettings(settings, payload.Settings);\n        SaveSettings();\n    }\n\n    public override void ReceivedGlobalSettings(ReceivedGlobalSettingsPayload payload) { }\n\n    #region Private Methods\n\n    private Task SaveSettings()\n    {\n        return Connection.SetSettingsAsync(JObject.FromObject(settings));\n    }\n\n    #endregion\n}\n</code></pre>"},{"location":"StreamSharp%20Full%20Documentation%20%28Official%29/StreamSharp.Base/Surface%20Types/shared-functions/#dissecting-the-code","title":"Dissecting the code","text":""},{"location":"StreamSharp%20Full%20Documentation%20%28Official%29/StreamSharp.Base/Surface%20Types/shared-functions/#plugin-action-id","title":"Plugin Action ID","text":"<pre><code>[PluginActionId(\"com.developer.csharptemplate.pluginactionkeyanddial\")]\n</code></pre> <p>This code represents the UUID of the specific action. In this sense </p>"},{"location":"StreamSharp%20Full%20Documentation%20%28Official%29/StreamSharp.Base/Surface%20Types/Combined%20Types/KeyAndEncoderBase/","title":"KeyAndEncoderBase","text":"<p>This combines the keys and the dials into a single format (for a single action).</p>"},{"location":"StreamSharp%20Full%20Documentation%20%28Official%29/StreamSharp.Base/Surface%20Types/Combined%20Types/KeyAndEncoderBase/#example-code","title":"Example code","text":"<pre><code>[PluginActionId(\"com.developer.csharptemplate.pluginactionkeyanddial\")]\npublic class PluginActionKeyAndDial : KeyAndEncoderBase\n{\n    private class PluginSettings\n    {\n        public static PluginSettings CreateDefaultSettings()\n        {\n            PluginSettings instance = new PluginSettings();\n            instance.OutputFileName = String.Empty;\n            instance.InputString = String.Empty;\n            return instance;\n        }\n\n        [FilenameProperty]\n        [JsonProperty(PropertyName = \"outputFileName\")]\n        public string OutputFileName { get; set; }\n\n        [JsonProperty(PropertyName = \"inputString\")]\n        public string InputString { get; set; }\n    }\n\n    #region Private Members\n\n    private PluginSettings settings;\n\n    #endregion\n    public PluginActionBoth(SDConnection connection, InitialPayload payload) : base(connection, payload)\n    {\n        if (payload.Settings == null || payload.Settings.Count == 0)\n        {\n            this.settings = PluginSettings.CreateDefaultSettings();\n            SaveSettings();\n        }\n        else\n        {\n            this.settings = payload.Settings.ToObject&lt;PluginSettings&gt;();\n        }\n    }\n\n    private void UpdateTitle()\n    {\n        Logger.Instance.LogMessage(TracingLevel.INFO, \"UpdateTitle called\");\n    }\n\n    public override void Dispose()\n    {\n        Logger.Instance.LogMessage(TracingLevel.INFO, $\"Destructor called\");\n    }\n\n    public override void KeyPressed(KeyPayload payload)\n    {\n        Logger.Instance.LogMessage(TracingLevel.INFO, \"Key Pressed\");\n    }\n\n    public override void KeyReleased(KeyPayload payload)\n    {\n        Logger.Instance.LogMessage(TracingLevel.INFO, \"Key Released\");\n    }\n\n    public override void DialRotate(DialRotatePayload payload)\n    {\n        Logger.Instance.LogMessage(TracingLevel.INFO, \"Dial Rotate\");\n    }\n\n    public override void DialDown(DialPayload payload)\n    {\n        Logger.Instance.LogMessage(TracingLevel.INFO, \"Dial Down\");\n    }\n\n    public override void DialUp(DialPayload payload)\n    {\n        Logger.Instance.LogMessage(TracingLevel.INFO, \"Dial Up\");\n    }\n\n    public override void TouchPress(TouchpadPressPayload payload)\n    {\n        Logger.Instance.LogMessage(TracingLevel.INFO, \"Touch Press\");\n    }\n\n    public override void OnTick() { }\n\n    public override void ReceivedSettings(ReceivedSettingsPayload payload)\n    {\n        Tools.AutoPopulateSettings(settings, payload.Settings);\n        SaveSettings();\n    }\n\n    public override void ReceivedGlobalSettings(ReceivedGlobalSettingsPayload payload) { }\n\n    #region Private Methods\n\n    private Task SaveSettings()\n    {\n        return Connection.SetSettingsAsync(JObject.FromObject(settings));\n    }\n\n    #endregion\n}\n</code></pre>"},{"location":"StreamSharp%20Full%20Documentation%20%28Official%29/StreamSharp.Base/Surface%20Types/Combined%20Types/KeyAndEncoderBase/#misc-information","title":"Misc information","text":"Granular control OK <p>There are no merged functions in this device type. It is therefore possible to maintain fully granular control over functionality for functions between keys and dials.</p> Included! <p>Until further notice, <code>KeyAndEncoderBase</code> is included in StreamSharp.Base - however this is subject to change.</p>"},{"location":"StreamSharp%20Full%20Documentation%20%28Official%29/StreamSharp.Base/Surface%20Types/Individual%20Types/EncoderBase/","title":"EncoderBase","text":"<p>Focused solely on using the dials (and corresponding touch screen above each dial), found on the Stream Deck Plus.</p>"},{"location":"StreamSharp%20Full%20Documentation%20%28Official%29/StreamSharp.Base/Surface%20Types/Individual%20Types/EncoderBase/#example-code","title":"Example code","text":"<pre><code>[PluginActionId(\"com.developer.csharptemplate.pluginactiondial\")]\npublic class PluginActionDial : EncoderBase\n{\n    private class PluginSettings\n    {\n        public static PluginSettings CreateDefaultSettings()\n        {\n            PluginSettings instance = new PluginSettings();\n            instance.OutputFileName = String.Empty;\n            instance.InputString = String.Empty;\n            return instance;\n        }\n\n        [FilenameProperty]\n        [JsonProperty(PropertyName = \"outputFileName\")]\n        public string OutputFileName { get; set; }\n\n        [JsonProperty(PropertyName = \"inputString\")]\n        public string InputString { get; set; }\n    }\n\n    #region Private Members\n\n    private PluginSettings settings;\n\n    #endregion\n    public PluginActionDial(SDConnection connection, InitialPayload payload) : base(connection, payload)\n    {\n        Logger.Instance.LogMessage(TracingLevel.INFO, \"Constructor called\");\n    }\n\n    private void UpdateTitle()\n    {\n        Logger.Instance.LogMessage(TracingLevel.INFO, \"UpdateTitle called\");\n    }\n\n    public override void DialRotate(DialRotatePayload payload)\n    {\n        Logger.Instance.LogMessage(TracingLevel.INFO, \"Dial Rotate\");\n    }\n\n    public override void DialDown(DialPayload payload)\n    {\n        Logger.Instance.LogMessage(TracingLevel.INFO, \"Dial Down\");\n    }\n\n    public override void DialUp(DialPayload payload)\n    {\n        Logger.Instance.LogMessage(TracingLevel.INFO, \"Dial Up\");\n    }\n\n    public override void TouchPress(TouchpadPressPayload payload)\n    {\n        Logger.Instance.LogMessage(TracingLevel.INFO, \"Touch Press\");\n    }\n\n    public override void ReceivedSettings(ReceivedSettingsPayload payload)\n    {\n        Logger.Instance.LogMessage(TracingLevel.INFO, \"Received Settings\");\n    }\n\n    public override void ReceivedGlobalSettings(ReceivedGlobalSettingsPayload payload)\n    {\n        Logger.Instance.LogMessage(TracingLevel.INFO, \"Received Global Settings\");\n    }\n\n    public override void OnTick() { }\n\n    public override void Dispose()\n    {\n        Logger.Instance.LogMessage(TracingLevel.INFO, \"Destructor called\");\n    }\n\n    // Additional event handling methods can be added as needed\n\n    // Implement any other necessary methods or properties\n\n    // Define the settings model class if not already defined\n    public class MySettingsModel\n    {\n        public string ImagePath { get; set; }\n        public string TargetDevice { get; set; }\n        // Add any other settings properties here\n    }\n}\n</code></pre>"},{"location":"StreamSharp%20Full%20Documentation%20%28Official%29/StreamSharp.Base/Surface%20Types/Individual%20Types/KeypadBase/","title":"KeypadBase","text":"<p>Focused solely on using the keys found on most (if not all) Stream Deck devices.</p>"},{"location":"StreamSharp%20Full%20Documentation%20%28Official%29/StreamSharp.Base/Surface%20Types/Individual%20Types/KeypadBase/#example-code","title":"Example code","text":"<pre><code>[PluginActionId(\"com.developer.csharptemplate.pluginactionkey\")]\npublic class PluginActionKey : KeypadBase\n{\n    private class PluginSettings\n    {\n        public static PluginSettings CreateDefaultSettings()\n        {\n            PluginSettings instance = new PluginSettings();\n            instance.OutputFileName = String.Empty;\n            instance.InputString = String.Empty;\n            return instance;\n        }\n\n        [FilenameProperty]\n        [JsonProperty(PropertyName = \"outputFileName\")]\n        public string OutputFileName { get; set; }\n\n        [JsonProperty(PropertyName = \"inputString\")]\n        public string InputString { get; set; }\n    }\n\n    #region Private Members\n\n    private PluginSettings settings;\n\n    #endregion\n    public PluginActionKey(SDConnection connection, InitialPayload payload) : base(connection, payload)\n    {\n        if (payload.Settings == null || payload.Settings.Count == 0)\n        {\n            this.settings = PluginSettings.CreateDefaultSettings();\n            SaveSettings();\n        }\n        else\n        {\n            this.settings = payload.Settings.ToObject&lt;PluginSettings&gt;();\n        }\n    }\n\n    public override void Dispose()\n    {\n        Logger.Instance.LogMessage(TracingLevel.INFO, $\"Destructor called\");\n    }\n\n    public override void KeyPressed(KeyPayload payload)\n    {\n        Logger.Instance.LogMessage(TracingLevel.INFO, \"Key Pressed\");\n    }\n\n    public override void KeyReleased(KeyPayload payload)\n    {\n        Logger.Instance.LogMessage(TracingLevel.INFO, \"Key Released\");\n    }\n\n    public override void OnTick() { }\n\n    public override void ReceivedSettings(ReceivedSettingsPayload payload)\n    {\n        Tools.AutoPopulateSettings(settings, payload.Settings);\n        SaveSettings();\n    }\n\n    public override void ReceivedGlobalSettings(ReceivedGlobalSettingsPayload payload) { }\n\n    #region Private Methods\n\n    private Task SaveSettings()\n    {\n        return Connection.SetSettingsAsync(JObject.FromObject(settings));\n    }\n\n    #endregion\n}\n</code></pre>"},{"location":"Useful%20Info%20%28Other%29/","title":"Miscellaneous Information","text":"<p>This section of the website covers mostly the unofficial third party helper plugins for StreamSharp, however it will also cover things like other tools we offer that don't directly relate to StreamSharp and the plugin building functionality of it.</p>"},{"location":"Useful%20Info%20%28Other%29/elgato/","title":"Important Elgato information","text":"<p>You can find the Stream Deck plugin documentation over on their wiki</p>"},{"location":"Useful%20Info%20%28Other%29/manifest/","title":"Manifest Support","text":"<p>Info</p> <p>Please be sure to check the Elgato SDK Manifest Information for all the latest documentation. We are not currently providing documentation on this page (but this will change in the future.)</p> Cannot use the schema in Visual Studio <p>When using the schema in Visual Studio (this does not apply to Visual Studio Code), it is not able to use the schema (it states that the schema is incorrect). This stops the IDE being able to validate your JSON schema to ensure you have included everything you need. (1) It is recommended that you use a separate editor such as Visual Studio Code for writing your manifest. As Visual Studio is only available for Windows, this issue does not affect Mac or Linux developers.</p> <ol> <li>We may attempt to bring out a variant of the schema specifically for use on Visual Studio.</li> </ol>"},{"location":"Useful%20Info%20%28Other%29/modules/","title":"Other modules - unofficial","text":""}]}